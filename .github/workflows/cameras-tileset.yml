name: Build & Publish Cameras Tileset

on:
  workflow_dispatch: {}     # run manually for the first success

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

            # 0) Fetch the latest raw dataset (prefer URL secret; fallback to script)
      - name: Fetch latest Flock cameras
        env:
          RAW_DATA_URL: ${{ secrets.RAW_DATA_URL }}  # <- set this in repo secrets if you have a working endpoint
        run: |
          set -e
          mkdir -p data
          if [ -n "$RAW_DATA_URL" ]; then
            echo "Downloading from RAW_DATA_URL..."
            curl -fsSL "$RAW_DATA_URL" -o data/raw_fetch.bin
          else
            echo "Running fetch-alprs.js..."
            node fetch-alprs.js --out data/raw_fetch.bin || node fetch-alprs.js > data/raw_fetch.bin
          fi
          echo "Fetched file:"
          ls -lh data/raw_fetch.bin || true
          echo "MIME:"
          file -b --mime-type data/raw_fetch.bin || true

          # If gzipped, decompress; otherwise copy
          if file -b --mime-type data/raw_fetch.bin | grep -qi gzip; then
            echo "Decompressing gzip payload..."
            gunzip -c data/raw_fetch.bin > data/raw_deflock.geojson
          else
            cp -f data/raw_fetch.bin data/raw_deflock.geojson
          fi

          echo "RAW preview (first 400 chars; control chars stripped):"
          head -c 400 data/raw_deflock.geojson | sed 's/[[:cntrl:]]/ /g' || true
          echo
          echo "RAW size:"
          wc -c data/raw_deflock.geojson || true

      # 0.1) Guard: RAW must parse and have many records (JSON, FeatureCollection, or NDJSON)
      - name: Check RAW count
        run: |
          node - <<'NODE'
          const fs=require('fs');
          const t=fs.readFileSync('data/raw_deflock.geojson','utf8').trim();
          if(!t.length){ throw new Error('raw_deflock.geojson is empty'); }
          let j=null, n=0;
          try { j=JSON.parse(t); } catch {}
          if (Array.isArray(j)) n=j.length;
          else if (j && (j.features||j.records||j.data||j.items)) {
            const arr = j.features||j.records||j.data||j.items;
            if (Array.isArray(arr)) n=arr.length;
          } else {
            // NDJSON fallback
            n = t.split(/\r?\n/).filter(Boolean).length;
          }
          console.log('RAW records (best-effort):', n);
          if (n < 10) { throw new Error('Too few RAW records; aborting'); }
          NODE

          
      # 1) Transform -> data/cameras.geojson
      - name: Transform -> cameras.geojson
        run: |
          set -e
          node scripts/transform_cameras.mjs
          ls -lh data/cameras.geojson
          # Guard: transformed must be valid, non-empty, and have many features
          node -e "const fs=require('fs');const g=JSON.parse(fs.readFileSync('data/cameras.geojson','utf8'));const f=g.features||[]; console.log('TRANSFORMED features:',f.length); if(!f.length) throw new Error('Transform produced 0 features'); if(f.length<10) throw new Error('Too few transformed features; aborting'); console.log('FIRST coords:',(f[0]||{}).geometry?.coordinates)"

      # 2) Install Mapbox tilesets CLI
      - name: Install Mapbox tilesets CLI
        run: python3 -m pip install --upgrade pip mapbox-tilesets

      # 3) Upload/replace the tileset source
      - name: Upload tileset source
        env:
          MAPBOX_ACCESS_TOKEN: ${{ secrets.MAPBOX_SECRET_TOKEN }}
        run: |
          test -s data/cameras.geojson || (echo "cameras.geojson is empty" && exit 1)
          tilesets upload-source masonzbirkett cameras_src data/cameras.geojson --replace

      # 4) Create the tileset (FIRST RUN ONLY)
      - name: Create tileset (one-time)
        env:
          MAPBOX_ACCESS_TOKEN: ${{ secrets.MAPBOX_SECRET_TOKEN }}
        run: |
          tilesets create masonzbirkett.cameras --recipe tilesets/cameras.recipe.json --name "Flock Cameras"

      # 5) Publish (build) the tileset
      - name: Publish tileset
        env:
          MAPBOX_ACCESS_TOKEN: ${{ secrets.MAPBOX_SECRET_TOKEN }}
        run: |
          tilesets publish masonzbirkett.cameras



